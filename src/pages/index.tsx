import { useState, useMemo } from 'react';
import wallpapers from '../../data/wallpapers.json';
import Image from 'next/image';
import Head from 'next/head';

type Wallpaper = {
  filename: string;
  season: string;
  style: string;
  source: string;
};

export default function HomePage() {
  const [seasonFilter, setSeasonFilter] = useState('All');
  const [styleFilter, setStyleFilter] = useState('All');
  const [peytonOnly, setPeytonOnly] = useState(false);
  const [selected, setSelected] = useState<Wallpaper | null>(null);

  const seasons = ['All', 'Summer', 'Fall', 'Winter', 'Spring'];
  const styles = useMemo(() => {
    const unique = new Set<string>();
    wallpapers.forEach((w) => unique.add(w.style));
    return ['All', ...Array.from(unique)];
  }, []);

  const filtered = wallpapers.filter((w) => {
    return (
      (seasonFilter === 'All' || w.season === seasonFilter) &&
      (styleFilter === 'All' || w.style === styleFilter) &&
      (!peytonOnly || w.source.toLowerCase() === 'peyton')
    );
  });

  const minGalleryCount = 5;
  const placeholdersNeeded = Math.max(0, minGalleryCount - filtered.length);

  return (
    <div className="bg-white min-h-screen font-sans text-gray-900">
      <Head>
        <title>WALLPEYPERS</title>
        <meta name="viewport" content="width=device-width, initial-scale=1" />
      </Head>

      <div className="p-4 sm:p-6 max-w-screen-xl mx-auto">
        <h1 className="text-3xl font-bold mb-6 text-center">WALLPEYPERS</h1>

        {/* Filters */}
        <div className="flex flex-col sm:flex-row justify-center items-center gap-4 mb-8 px-4">
          <div className="flex flex-col sm:flex-row items-center gap-3 bg-gray-100 rounded-2xl p-4 w-full sm:w-auto">
            {/* Season Filter */}
            <div className="relative w-full sm:w-auto">
              <label className="sr-only" htmlFor="seasonFilter">Season</label>
              <select
                id="seasonFilter"
                value={seasonFilter}
                onChange={(e) => setSeasonFilter(e.target.value)}
                className="appearance-none bg-white border border-gray-300 text-gray-700 text-sm rounded-full pl-4 pr-10 py-2 w-full sm:w-auto focus:outline-none focus:ring-2 focus:ring-gray-300"
              >
                {seasons.map((s) => (
                  <option key={s}>{s}</option>
                ))}
              </select>
              <svg
                xmlns="http://www.w3.org/2000/svg"
                className="w-4 h-4 text-gray-500 absolute right-3 top-1/2 transform -translate-y-1/2 pointer-events-none"
                fill="none"
                viewBox="0 0 24 24"
                stroke="currentColor"
                strokeWidth="2"
              >
                <path strokeLinecap="round" strokeLinejoin="round" d="M19 9l-7 7-7-7" />
              </svg>
            </div>

            {/* Style Filter */}
            <div className="relative w-full sm:w-auto">
              <label className="sr-only" htmlFor="styleFilter">Style</label>
              <select
                id="styleFilter"
                value={styleFilter}
                onChange={(e) => setStyleFilter(e.target.value)}
                className="appearance-none bg-white border border-gray-300 text-gray-700 text-sm rounded-full pl-4 pr-10 py-2 w-full sm:w-auto focus:outline-none focus:ring-2 focus:ring-gray-300"
              >
                {styles.map((s) => (
                  <option key={s}>{s}</option>
                ))}
              </select>
              <svg
                xmlns="http://www.w3.org/2000/svg"
                className="w-4 h-4 text-gray-500 absolute right-3 top-1/2 transform -translate-y-1/2 pointer-events-none"
                fill="none"
                viewBox="0 0 24 24"
                stroke="currentColor"
                strokeWidth="2"
              >
                <path strokeLinecap="round" strokeLinejoin="round" d="M19 9l-7 7-7-7" />
              </svg>
            </div>

            {/* Toggle */}
            <label className="flex items-center gap-2 bg-white border border-gray-300 text-sm rounded-full pl-4 pr-4 py-2 cursor-pointer select-none w-full sm:w-auto">
              <input
                type="checkbox"
                checked={peytonOnly}
                onChange={() => setPeytonOnly(!peytonOnly)}
                className="form-checkbox h-4 w-4 text-black rounded focus:ring-0 focus:outline-none"
              />
              Generated by Peyton
            </label>
          </div>
        </div>

        {/* Gallery Grid */}
        <div className="grid grid-cols-[repeat(auto-fill,minmax(180px,1fr))] justify-start gap-4 min-h-[400px] max-w-screen-2xl mx-auto px-4">
          {filtered.map((wallpaper, index) => (
            <div
              key={index}
              onClick={() => setSelected(wallpaper)}
              className="relative aspect-[9/16] rounded-xl overflow-hidden shadow-sm hover:shadow-md transition cursor-pointer bg-gray-100"
            >
              <Image
                src={`/wallpapers/thumbs/${wallpaper.filename}`}
                alt={wallpaper.filename}
                fill
                className="object-cover"
                sizes="(max-width: 768px) 50vw, (max-width: 1024px) 33vw, 20vw"
                priority
              />
            </div>
          ))}

          {Array.from({ length: placeholdersNeeded }).map((_, index) => (
            <div
              key={`placeholder-${index}`}
              className="aspect-[9/16] rounded-xl bg-transparent invisible"
            />
          ))}
        </div>
      </div>

      {/* Modal Overlay */}
      {selected && (
        <div
          className="fixed inset-0 bg-black/80 flex items-center justify-center z-50 p-4"
          onClick={() => setSelected(null)}
        >
          <div
            className="bg-white rounded-xl w-full max-w-[240px] sm:max-w-[260px] shadow-2xl relative flex flex-col items-center"
            onClick={(e) => e.stopPropagation()}
          >
            <div className="relative w-full">
              <button
                onClick={() => setSelected(null)}
                className="absolute top-2 right-2 z-10"
              >
                <span className="w-6 h-6 bg-gray-100 text-gray-700 rounded-full shadow-sm flex items-center justify-center text-base font-medium hover:bg-gray-200">
                  Ã—
                </span>
              </button>
              <div className="relative w-full aspect-[9/16] rounded-xl overflow-hidden border border-gray-200">
                <Image
                  src={`/wallpapers/full/${selected.filename}`}
                  alt={selected.filename}
                  fill
                  className="absolute inset-0 object-cover"
                />
              </div>
            </div>
            <div className="py-4">
              <a
                href={`/wallpapers/full/${selected.filename}`}
                download
                className="bg-black text-white px-4 py-2 rounded hover:bg-gray-800 text-sm"
              >
                Download
              </a>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
